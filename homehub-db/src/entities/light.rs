//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

pub use crate::extra_models::light::LightState;

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize,
)]
#[sea_orm(table_name = "light")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub state: LightState,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::room_light::Entity")]
    RoomLight,
}

impl Related<super::room_light::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoomLight.def()
    }
}

impl Related<super::room::Entity> for Entity {
    fn to() -> RelationDef {
        super::room_light::Relation::Room.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::room_light::Relation::Light.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
